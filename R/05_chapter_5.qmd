---
title: "Chapter 5"
format: html
editor: source
echo: true
message: false
warning: false

---

### libraries

```{r}
library(ggplot2)
library(ggthemes)
library(patchwork)
library(Hmsc)
library(viridis)
library(dplyr)
library(tidyr)
```



## 5.6 Simulated case studies

p.80

### simulating data

Example from the book

```{r}

n <- 50
x <- rnorm(n)

# parameters----------
beta1 <- 0
beta2 <- 1

L <- beta1 + beta2 *x
y1 <- L + rnorm(n, sd = 1)
y2 <- 1 * ((L + rnorm(n, sd = 1)) > 0)
y3 <- rpois(n = n, lambda = exp(L + rnorm(n, sd = 1)))

```

```{r fig.height=4, fig.width=8}
A <- ggplot(data = data.frame(L, y1), aes(L, y1)) +
	geom_point() +
	theme_bw() +
	ggtitle("Normal")


```


### 5.6.2 fitting models

normal distribution
```{r}
df <- data.frame(x, y1)
m.lm <- lm(y1 ~ x, data = df)

summary(m.lm)
```

first we need to construct the model

```{r}
Y <- as.matrix(y1)
XData <- data.frame(x = x)
m.normal <- Hmsc(Y = Y, XData = XData, XFormula = ~ x)

m.normal

```


```{r}
nChains <- 2
thin <- 5

samples <- 1000
transient <- 500*thin
verbose <- 500*thin
```


```{r}
m.normal <- sampleMcmc(m.normal, thin = thin, samples = samples, transient = transient, nChains = nChains, verbose = verbose)
```


```{r}
mpost <- convertToCodaObject(m.normal)
```

```{r}
summary(mpost$Beta)
```

R2


```{r}

 preds <- computePredictedValues (m.normal, expected = T)
 MF <- evaluateModelFit(hM = m.normal, predY = preds)
 MF$RMSE

```
                                                                                        
                                                                                        
```{r}
plot(mpost$Beta)
```



```{r}
effectiveSize(mpost$Beta)

gelman.diag(mpost$Beta)$psrf

```

                                                                                                                                                                                     
```{r}

plot(mpost$Beta)

```

check residuals

```{r fig.height=5, fig.width=8}
dfres <- data.frame(
	nres.lm = rstandard(m.lm),
	preds.lm = fitted.values(m.lm)
)
dfres$id <- 1:nrow(dfres)


A <- ggplot(data =dfres, aes(x = nres.lm)) +
	geom_histogram() +
	theme_bw() +
	ggtitle("") +
	xlab("Residuals")


B <- ggplot(data = dfres, aes(preds.lm, nres.lm)) +
	geom_point() +
	geom_hline(yintercept = 0) +
	theme_bw()+
	ylab("Residuals") +
	xlab("prediction")
	

A + B  +
  plot_annotation(tag_levels = 'A',
  								tag_prefix = "(",
  								tag_suffix =  ")")


```

on bayesian model:

```{r}
dfres <- data.frame(
	preds.lm = apply(preds, FUN = mean, MARGIN = 1)
)
dfres$nres.lm <- y1 - dfres$preds.lm


A <- ggplot(data =dfres, aes(x = nres.lm)) +
	geom_histogram() +
	theme_bw() +
	ggtitle("") +
	xlab("Residuals")


B <- ggplot(data = dfres, aes(preds.lm, nres.lm)) +
	geom_point() +
	geom_hline(yintercept = 0) +
	theme_bw()+
	ylab("Residuals") +
	xlab("prediction")
	

A + B  +
  plot_annotation(tag_levels = 'A',
  								tag_prefix = "(",
  								tag_suffix =  ")")
```



### GLMs 5.6.5

binomial distribution

```{r}
Y <- as.matrix(y2)
m.probit = Hmsc(Y = Y, XData = XData, XFormula = ~ x, distr = "probit")

```
same posterior sampling


```{r}
verbose <- 0
m.probit <- sampleMcmc(m.probit, thin = thin, samples = samples, transient = transient, nChains = nChains, verbose = verbose)

```


```{r}
mpost <- convertToCodaObject(m.probit)
effectiveSize(mpost$Beta)
plot(mpost$Beta)

gelman.diag(mpost$Beta, multivariate = FALSE)$psrf
```
the effective size is smaller, because achieving convergence is harder for non normal models

```{r}
round(summary(mpost$Beta)$quantiles, 2)

preds <- computePredictedValues(m.probit)
evaluateModelFit(hM = m.probit, predY = preds)

```
also ìthe values show more uncertainty



*lognormal model*
```{r}
Y <- as.matrix(y3)
m.lognormal.poisson  <- Hmsc(Y = Y, XData = XData, XFormula = ~ x, distr = "lognormal poisson")

m.lognormal.poisson <- sampleMcmc(m.lognormal.poisson, thin = thin, samples = samples, transient = transient, nChains = nChains, verbose = verbose)

mpost <- convertToCodaObject(m.lognormal.poisson)

effectiveSize(mpost$Beta)
gelman.diag(mpost$Beta, multivariate = FALSE)$psrf

```


```{r}
round(summary(mpost$Beta)$quantiles, 2)

preds <- computePredictedValues(m.lognormal.poisson, expected = TRUE)
evaluateModelFit(hM = m.lognormal.poisson, predY = preds)
```

```{r}
par(mfrow = c(1, 3))
for (i in 1:3){
	
	m <- switch(i, m.normal, m.probit, m.lognormal.poisson)
	Gradient <- constructGradient(m, focalVariable = "x")
	predY <- predict(m, Gradient = Gradient, expected = TRUE)
	
	plotGradient(m, Gradient, pred = predY, measure = "Y", index = 1, showData = TRUE, main = 
							 	c("Normal", "Probit", "Lognormal Poisson")[i])
	
}
```


### 5.6.7 Hierarchical Random Effects

```{r}
n <- 120
x <- rnorm(n)
beta1 <- 0
beta2 <- 1
sigma <- 1

np <- 12
sigma.plot <- 1
L <- beta1 + beta2 * x
plot.id <- sample(1:np, n, replace = T)
ap <- rnorm(np, sd = sigma.plot)
a <- ap[plot.id]
y <- L + a + rnorm(n, sd = sigma)
```
 
```{r}
df <- data.frame(x, y, plot.id)
lin <- data.frame(beta1 = beta1 + ap, beta2 = beta2, plot.id = 1:12)

ggplot(df, aes(x, y)) +
	geom_point(aes(colour = factor(plot.id))) +
	geom_abline(data = lin, aes(intercept = beta1, slope = beta2, colour = factor(plot.id)))

```

lmer

```{r}
plot.id <- as.factor(plot.id)
sample.id <- as.factor(1:n)
XData <- data.frame(x)
Y <- as.matrix(y)

studyDesign <- data.frame(sample = sample.id, plot= plot.id)
rL <- HmscRandomLevel(units = studyDesign$plot)
m <- Hmsc(Y = Y, XData = XData, XFormula = ~ x, studyDesign = studyDesign,
					ranLevels = list("plot" = rL))

```



fit the model

```{r}
m <- sampleMcmc(m, thin = thin, samples = samples, transient = transient, nChains = nChains, verbose = verbose)
```


```{r}
mpost <- convertToCodaObject(m)

effectiveSize(mpost$Beta)
gelman.diag(mpost$Beta, multivariate = FALSE)$psrf

plot(mpost$Beta)

```


```{r}
preds <- computePredictedValues(m)
MF <- evaluateModelFit(hM = m, predY = preds)
MF
```


*cross validation*

```{r}
partition <- createPartition(m , nfolds = 2, colum = "sample")
partition
```


```{r}
preds = computePredictedValues(m, partition = partition)
```


```{r}
MF <- evaluateModelFit(hM = m, predY = preds)
MF
```

si può fare la partizione sui plot invece che sulle samplign units


```{r}
partition <- createPartition(m, nfolds = 2, column = "plot")
table(partition, plot.id)

```

```{r}
preds = computePredictedValues(m, partition = partition)
```


```{r}
MF <- evaluateModelFit(hM = m, predY = preds)
MF
```

crollo di R2


### 5.6.9 spatial Random Effects


```{r}
n <- 100
beta1 <- 0
beta2 <- 1
sigma <- 1
sigma.spatial <- 2
alpha.spatial <- 0.5
x <- rnorm(n)
L <- beta1 + beta2 * x
xycoords <- matrix(runif(2*n), ncol = 2)
Sigma <- sigma.spatial^2* exp(-as.matrix(dist(xycoords)) / alpha.spatial)
a <- MASS::mvrnorm(mu = rep(0, n), Sigma = Sigma)
y <- L + a + rnorm(n, sd = sigma)

```


```{r}
df <- data.frame(xycoords,x, y)

ggplot(df |> pivot_longer(c(3, 4)), aes(X1, X2, colour = value)) +
	geom_point(aes(size = abs(value))) +
	coord_cartesian() +
	theme_few() +
	facet_wrap(~ name) +
	scale_color_viridis()

```

```{r}
sample.id <- as.factor(1:n)
studyDesign <- data.frame(sample = sample.id)
rownames(xycoords) <- sample.id
rL <- HmscRandomLevel(sData = xycoords)
XData <- data.frame(x)
Y <- as.matrix(y)
m <- Hmsc(Y = Y, XData = XData, XFormula = ~ x,
					studyDesign = studyDesign, ranLevels = list("sample" = rL))
```


```{r}
m <- sampleMcmc(m, thin = thin, samples = samples, transient = transient, nChains = nChains, verbose = verbose)

preds <- computePredictedValues(m)
MF <- evaluateModelFit(hM = m, predY = preds)
MF$R2
```

```{r}
mpost <- convertToCodaObject(m)
plot(mpost$Alpha[[1]])

summary(mpost$Alpha[[1]])$quantiles
```


comparison with non spatial model

```{r}
m <- Hmsc(Y = Y, XData = XData, XFormula = ~ x)

m <- sampleMcmc(m, thin = thin, samples = samples, transient = transient, nChains = nChains, verbose = verbose)

preds <- computePredictedValues(m)
MF <- evaluateModelFit(hM = m, predY = preds)
MF$R2

```


## Real Data Case Study

```{r}
da <- read.csv(here::here('data/databird/data.csv'))
da <- droplevels(subset(da, Year == 2014))

XData <- data.frame(hab = factor(da$Habitat), clim = da$AprMay)
Y <- as.matrix(da$Corvus_monedula)
colnames(Y) <- "Corvus modedula"
xy <- as.matrix(cbind(da$x, da$y))

```



```{r heigth = 5, width = 10}
df <- data.frame(XData, Y, xy)

A <- ggplot(df, aes(X1, X2, colour = hab, pch = hab)) +
	geom_point() +
	theme_few() +
	ggtitle("Habitat") +
	xlab("") + ylab("")
B <- ggplot(df, aes(X1, X2, colour = clim, size = clim)) +
	geom_point() +
	theme_few() +
	ggtitle("Climatic variable") +
	xlab("") + ylab("") +
	scale_colour_viridis()

C <- ggplot(df, aes(X1, X2, colour = Corvus.modedula, size = Corvus.modedula)) +
	geom_point()+
	theme_few() +
	ggtitle("Corvus count") +
	xlab("") + ylab("") +
	scale_colour_viridis(option = "magma")


A + B + C +
  plot_annotation(tag_levels = 'A',
  								tag_prefix = "(",
  								tag_suffix =  ")")


```

model fitting

```{r}
studyDesign <- data.frame(route = as.factor(da$Route))
rownames(xy) <- studyDesign[,1]
rL <- HmscRandomLevel(sData = xy)
XFormula = ~hab + poly(clim, degree = 2, raw = TRUE)

mFULL <- Hmsc(Y = Y, XData = XData, XFormula = XFormula, distr = "lognormal poisson", studyDesign = studyDesign, ranLevels = list(route = rL))

mENV <- Hmsc(Y = Y, XData = XData, XFormula = XFormula, distr = "lognormal poisson")

mSPACE <- Hmsc(Y = Y, XData = XData, XFormula = ~ 1, distr = "lognormal poisson", studyDesign = studyDesign, ranLevels = list(route = rL))



```

we fit the model

```{r}
models <- list(mFULL, mENV, mSPACE)

for(i in 1:3){
	models[[i]] <- sampleMcmc(models[[i]], thin = thin,
														samples = samples, transient = transient, nChains = nChains, verbose = verbose, initPar = "fixed effects")
}
```



```{r}
mpost <- convertToCodaObject(models[[1]],
														 spNamesNumbers = c(T, F),
														 covNamesNumbers = c(T, F))

plot(mpost$Beta)
plot(mpost$Alpha[[1]])

ess.beta <- effectiveSize(mpost$Beta)
psrf.beta <- gelman.diag(mpost$Beta, multivariate = FALSE)$psrf
ess.alpha <- effectiveSize(mpost$Alpha[[1]])
psrf.alpha <- gelman.diag(mpost$Alpha[[1]], multivariate = FALSE)$psrf


ess.beta
psrf.beta

ess.alpha
psrf.alpha

# wanto to plot the trace of the parameters

```



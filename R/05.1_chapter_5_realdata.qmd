---
title: "Chapter 5"
format: html
editor: source
echo: true
message: false
warning: false

---

### libraries

```{r}
library(ggplot2)
library(ggthemes)
library(patchwork)
library(Hmsc)
library(viridis)
library(dplyr)
library(tidyr)
```



## 5.7 Real Data SDM

p.92

### simulating data

Example from the book



```{r}
nChains <- 2
thin <- 1

samples <- 600
transient <- 100*thin
verbose <- 100*thin
```




## Real Data Case Study

```{r}
da <- read.csv(here::here('data/databird/data.csv'))
da <- droplevels(subset(da, Year == 2014))

XData <- data.frame(hab = factor(da$Habitat), clim = da$AprMay)
Y <- as.matrix(da$Corvus_monedula)
colnames(Y) <- "Corvus modedula"
xy <- as.matrix(cbind(da$x, da$y))

```



```{r heigth = 5, width = 10}
df <- data.frame(XData, Y, xy)

A <- ggplot(df, aes(X1, X2, colour = hab, pch = hab)) +
	geom_point() +
	theme_few() +
	ggtitle("Habitat") +
	xlab("") + ylab("")
B <- ggplot(df, aes(X1, X2, colour = clim, size = clim)) +
	geom_point() +
	theme_few() +
	ggtitle("Climatic variable") +
	xlab("") + ylab("") +
	scale_colour_viridis()

C <- ggplot(df, aes(X1, X2, colour = Corvus.modedula, size = Corvus.modedula)) +
	geom_point()+
	theme_few() +
	ggtitle("Corvus count") +
	xlab("") + ylab("") +
	scale_colour_viridis(option = "magma")


A + B + C +
  plot_annotation(tag_levels = 'A',
  								tag_prefix = "(",
  								tag_suffix =  ")")


```

model fitting

```{r}
studyDesign <- data.frame(route = as.factor(da$Route))
rownames(xy) <- studyDesign[,1]
rL <- HmscRandomLevel(sData = xy)
XFormula = ~hab + poly(clim, degree = 2, raw = TRUE)

mFULL <- Hmsc(Y = Y, XData = XData, XFormula = XFormula, distr = "lognormal poisson", studyDesign = studyDesign, ranLevels = list(route = rL))

mENV <- Hmsc(Y = Y, XData = XData, XFormula = XFormula, distr = "lognormal poisson")

mSPACE <- Hmsc(Y = Y, XData = XData, XFormula = ~ 1, distr = "lognormal poisson", studyDesign = studyDesign, ranLevels = list(route = rL))



```

we fit the model

```{r}
models <- list(mFULL, mENV, mSPACE)

for(i in 1:3){
	models[[i]] <- sampleMcmc(models[[i]], thin = thin,
														samples = samples, transient = transient, nChains = nChains, verbose = verbose, initPar = "fixed effects")
}
```



```{r}
mpost <- convertToCodaObject(models[[1]],
														 spNamesNumbers = c(T, F),
														 covNamesNumbers = c(T, F))

plot(mpost$Beta)
plot(mpost$Alpha[[1]])

ess.beta <- effectiveSize(mpost$Beta)
psrf.beta <- gelman.diag(mpost$Beta, multivariate = FALSE)$psrf
ess.alpha <- effectiveSize(mpost$Alpha[[1]])
psrf.alpha <- gelman.diag(mpost$Alpha[[1]], multivariate = FALSE)$psrf


ess.beta
psrf.beta

ess.alpha
psrf.alpha

# wanto to plot the trace of the parameters

```


```{r}
MF <- list()
for(i in 1:3){
	preds = computePredictedValues(models[[i]], expected = FALSE)
	MF[[i]] <- evaluateModelFit(hM = models[[i]], predY = preds)
}

MF
```



## variance partitioning

```{r}
round(head(models[[1]]$X), 2)

groupnames = c("habitat", "climate")
group <- c(1, 1, 1, 1, 1, 2, 2)

VP <- list()
for(i in 1:2){
	VP[[i]] <- computeVariancePartitioning(models[[i]], group = group, groupnames = groupnames)
}


VP
```


## model parameters

```{r}
summary(mpost$Beta, quantiles = c(0.025, 0.5, 0.975))
```

## predictions
```{r}
m <- models[[1]]
par(mfrow = c(1, 2))

Gradient <- constructGradient(m, focalVariable = "clim", non.focalVariables = list(hab = 1))
predY <- predict(m, Gradient = Gradient, expected = TRUE)
plotGradient(m, Gradient, pred = predY, measure = "Y", index = 1, showData = TRUE)

Gradient = constructGradient(m, focalVariable = "clim", non.focalVariables = list(hab = 2))

predY <- predict(Gradient, expected = TRUE)
plotGradient(m, Gradient, pred = predY, measure = "Y", index = 1, showData = TRUE)

```


spatial scale of the random effect

```{r}
mpost <- converToCodaObject(models[[3]]) # spatial model
summary(mpost$Alpha[[1]], quantiles = c(0.025, 0.5, 0.975))

```

```{r}
partition <- createPartition(models[[1]], nfolds = 2, column = "route")
MF <- list()

for(i in 1:3){
	preds <- computePredictedValues[[i]],
	partition = partition)
MF[[i]] <- evaluateModelFit(hM = models[[i]], predY = preds)
}

MF
```



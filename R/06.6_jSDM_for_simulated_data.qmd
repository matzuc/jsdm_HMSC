---
title: "Chapter 5"
format: html
editor: source
echo: true
message: false
warning: false

---

### libraries

```{r}
library(ggplot2)
library(ggthemes)
library(patchwork)
library(Hmsc)
library(viridis)
library(dplyr)
library(tidyr)
library(ape)
```

p. 120

```{r}
ns <- 100
phy <- rcoal(n = ns, tip.label = sprintf("sp_%.3d", 1:ns), br = "coalescent")
C <- vcv(phy, model = "Brownian", corr = TRUE)

plot(phy)
```


traits

```{r}
Tr.A <- cbind(rep(1, ns), rnorm(ns))
Tr.B <- cbind(rep(1, ns), MASS::mvrnorm(n = 1, mu = rep(0, ns), Sigma = C))

```


```{r}
gamma <- cbind(c(-2, 2), c(-1, 1))
mu.A <- gamma %*% t(Tr.A)
mu.B <- gamma %*% t(Tr.B)

```
species niche

```{r}
V2 <- diag(2)
beta.A <- matrix(MASS::mvrnorm(n = 1, mu = as.vector(mu.A), Sigma = kronecker(C, V2)), ncol = ns)
beta.B <- matrix(MASS::mvrnorm(n = 1, mu = as.vector(mu.B), Sigma = kronecker(C, V2)), ncol = ns)


```

## species simulation

```{r}
n <- 50
X <- cbind(rep(1, n), rnorm(n))

L.A <- X %*% beta.A
L.B <- X %*% beta.B

Y.A <- 1*((L.A + matrix(rnorm(n*ns), ncol = ns)) > 0)
Y.B <- 1*((L.B + matrix(rnorm(n*ns), ncol = ns)) > 0)

```



### exploring raw data

```{r}
S.A <- rowSums(Y.A)
P.A <- colMeans(Y.A)
S.B <- rowSums(Y.B)
P.B <- colMeans(Y.B)



# data frame in long format and label (variable name) of S.A, P.A, S.B, P.B, to be plotted with ggplot and facet
df <- rbind(
	data.frame(value = S.A, label = "S.A"),
	data.frame(value = P.A, label = "P.A"),
	data.frame(value = S.B, label = "S.B"),
  data.frame(value = P.B, label = "P.B")
)

ggplot(df, aes(x = value)) +
	geom_histogram() +
	facet_wrap(~label, scale = "free")

```


with env gradient

```{r}

plot(X[, 2], S.A)
plot(X[, 2], S.B)
```


### 6.6.4 
```{r}
community <- "A"
Y <- switch(
	community,
	A = Y.A,
	B = Y.B
)
colnames(Y) <- phy$tip.label


Tr <- switch(
	community,
	A = Tr.A,
	B = Tr.B
)
TrData <- data.frame(trait = Tr[, 2])
row.names(TrData) <- colnames(Y)
XData <- data.frame(env = X[, 2])


```


*define the model*

```{r}
m <- Hmsc(
	Y = Y,
	XData = XData,
	XFormula = ~env,
	TrData = TrData,
	TrFormula = ~trait,
	phyloTree = phy,
	distr = "probit"
)


```


```{r}
nChains <- 2
thin <- 5
samples <- 1000
transient <- 500*thin
verbose <- 500*thin

```



model fitting
```{r}
m <- sampleMcmc(m, thin = thin, samples = samples,
								transient = transient, nChains = nChains, verbose = verbose)

```

```{r}
mpost <- convertToCodaObject(m)
```

```{r}

effectiveSize(mpost$Rho)
gelman.diag(mpost$Rho, multivariate = FALSE, autoburnin =  FALSE)$psrf

```


```{r}
preds <- computePredictedValues(m)
MF <- evaluateModelFit(hM = m, predY = preds)
MF
```

